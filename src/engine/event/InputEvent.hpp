#ifndef LIBME_INPUT_EVENT_HPP
  #define LIBME_INPUT_EVENT_HPP

namespace me {

  enum InputEventKey {
    INPUT_EVENT_UNKNOWN_KEY,
    INPUT_EVENT_KB_ESCAPE_KEY,
    INPUT_EVENT_KB_ENTER_KEY,
    INPUT_EVENT_KB_BACKSPACE_KEY,
    INPUT_EVENT_KB_SPACE_KEY,
    INPUT_EVENT_KB_TAB_KEY,
    INPUT_EVENT_KB_LEFT_SHIFT_KEY,
    INPUT_EVENT_KB_RIGHT_SHIFT_KEY,
    INPUT_EVENT_KB_LEFT_CONTROL_KEY,
    INPUT_EVENT_KB_RIGHT_CONTROL_KEY,
    INPUT_EVENT_KB_ALT1_KEY,
    INPUT_EVENT_KB_ALT2_KEY,
    INPUT_EVENT_KB_ALT3_KEY,
    INPUT_EVENT_KB_ALT4_KEY,
    INPUT_EVENT_KB_0_KEY = 0x30,
    INPUT_EVENT_KB_1_KEY = 0x31,
    INPUT_EVENT_KB_2_KEY = 0x32,
    INPUT_EVENT_KB_3_KEY = 0x33,
    INPUT_EVENT_KB_4_KEY = 0x34,
    INPUT_EVENT_KB_5_KEY = 0x35,
    INPUT_EVENT_KB_6_KEY = 0x36,
    INPUT_EVENT_KB_7_KEY = 0x37,
    INPUT_EVENT_KB_8_KEY = 0x38,
    INPUT_EVENT_KB_9_KEY = 0x39,
    INPUT_EVENT_KB_A_KEY = 0x41,
    INPUT_EVENT_KB_B_KEY = 0x42,
    INPUT_EVENT_KB_C_KEY = 0x43,
    INPUT_EVENT_KB_D_KEY = 0x44,
    INPUT_EVENT_KB_E_KEY = 0x45,
    INPUT_EVENT_KB_F_KEY = 0x46,
    INPUT_EVENT_KB_G_KEY = 0x47,
    INPUT_EVENT_KB_H_KEY = 0x48,
    INPUT_EVENT_KB_I_KEY = 0x49,
    INPUT_EVENT_KB_J_KEY = 0x4A,
    INPUT_EVENT_KB_K_KEY = 0x4B,
    INPUT_EVENT_KB_L_KEY = 0x4C,
    INPUT_EVENT_KB_M_KEY = 0x4D,
    INPUT_EVENT_KB_N_KEY = 0x4E,
    INPUT_EVENT_KB_O_KEY = 0x4F,
    INPUT_EVENT_KB_P_KEY = 0x50,
    INPUT_EVENT_KB_Q_KEY = 0x51,
    INPUT_EVENT_KB_R_KEY = 0x52,
    INPUT_EVENT_KB_S_KEY = 0x53,
    INPUT_EVENT_KB_T_KEY = 0x54,
    INPUT_EVENT_KB_U_KEY = 0x55,
    INPUT_EVENT_KB_V_KEY = 0x56,
    INPUT_EVENT_KB_W_KEY = 0x57,
    INPUT_EVENT_KB_X_KEY = 0x58,
    INPUT_EVENT_KB_Y_KEY = 0x59,
    INPUT_EVENT_KB_Z_KEY = 0x5A,
    INPUT_EVENT_KB_ARROW_UP_KEY,
    INPUT_EVENT_KB_ARROW_DOWN_KEY,
    INPUT_EVENT_KB_ARROW_LEFT_KEY,
    INPUT_EVENT_KB_ARROW_RIGHT_KEY,

    INPUT_EVENT_MOUSE_BUTTON1_KEY,
    INPUT_EVENT_MOUSE_BUTTON2_KEY,
    INPUT_EVENT_MOUSE_BUTTON3_KEY
  };

  enum InputEventAction {
    INPUT_EVENT_UNKNOWN_ACTION,
    INPUT_EVENT_PRESS_ACTION,
    INPUT_EVENT_RELEASE_ACTION
  };


  struct InputEventCallback {
    typedef int (input_event_key_fn) (InputEventAction action, InputEventKey key, void* ptr);
    typedef int (input_event_cursor_position_fn) (double off_x, double off_y, void* ptr);

    input_event_key_fn* input_event_key;
    input_event_cursor_position_fn* input_event_cursor_position;
  };

}

#endif
